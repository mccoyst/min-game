Coding Style
============

Names
-----

Type, constant, and public member names are PascalCase. Private member names and local variables are camelCase. Namespaces are lowercase; keep them short and only use them for libraries. File names are lowercase, "ccpp" is the extension for C++ code, "hpp" for C++ headers.

Indentation
-----------

Use tabs for indentation. Do not worry about aligning things to look "pretty" in your chosen font; many of us use variable-width fonts. Just maintain indentation. For example, if a function takes a lot of arguments, do not waste your precious life lining up the arguments with the opening parenthesis:

	printf("%d %d %d %d\n",
		cat,
		dog,
		capybara,
		zygomorphichistomorphism);

Just indent one more time and forget about it. Don't indent inside namespaces unless they are very short and are going to stay that way.

Headers
-------

Include as few other headers as possible; prefer forward declarations for types. Function arguments and returns do not need to be defined unless the function is defined inline. Avoid inline definitions except for simple wrapper types like Fixed, and for completely trivial definitions like empty constructors. Avoid 1:1 header:implementation relationships; headers should contain a group of related classes and functions and each of those classes and functions can be idefined in their own files if necessary, but it's a pain if every class has its own header that needs to be included, because the top of each cpp file grows to more and more #include lines.

Struct vs. Class
----------------

It should be easy to forward declare types, however the compilers will complain if a type is forward declared as a struct but defined as a class (or vice-versa). So, we should be consistent in which type specifier we use. Unless something is a C-style POD, with no member functions, construtors, etc., use the "class" specifier to define types.

More
----

Do not check in commented-out code unless it has never been checked in before and you specifically want someone else to take a look at it, but not break everybody else's build. Otherwise, delete that comment oand either delete the code or check it in.

Do not worry about the width of your lines, beyond keeping them comfortably narrow. If something goes over 80 columns, don't strain the code formatting tor sacrifice good names to fit it in. If you have to break a line in two, follow the indentation rules; do not try to line things up perfectly.

For more decent guidelines, the LLVM standards are decent: http://llvm.org/docs/CodingStandards.html . Try to follow them wherever they don't directly contradict the above, or refer to LLVM-specific organization/types/etc.
